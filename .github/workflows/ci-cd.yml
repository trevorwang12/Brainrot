# GitHub Actions CI/CD 配置文件

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: brainrot-news

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type check
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm test --if-present

    - name: Build project
      run: npm run build

  # Docker 构建测试
  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (Dokploy)
      run: |
        docker build -f Dockerfile.dokploy -t ${{ env.DOCKER_IMAGE }}:dokploy .

    - name: Build Docker image (Production)
      run: |
        docker build -f Dockerfile -t ${{ env.DOCKER_IMAGE }}:latest .

    - name: Test Docker image
      run: |
        docker run -d -p 3000:3000 --name test-container ${{ env.DOCKER_IMAGE }}:dokploy
        sleep 10
        curl -f http://localhost:3000/api/health || exit 1
        docker stop test-container
        docker rm test-container

  # 部署到 Dokploy (仅在 main 分支)
  deploy-dokploy:
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Trigger Dokploy deployment
      env:
        DOKPLOY_WEBHOOK_URL: ${{ secrets.DOKPLOY_WEBHOOK_URL }}
      run: |
        if [ -n "$DOKPLOY_WEBHOOK_URL" ]; then
          curl -X POST "$DOKPLOY_WEBHOOK_URL"
          echo "✅ Dokploy deployment triggered"
        else
          echo "⚠️ DOKPLOY_WEBHOOK_URL not set, skipping deployment"
        fi

  # 通知部署状态
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-dokploy]
    if: always()
    steps:
    - name: Notify deployment status
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ "${{ needs.deploy-dokploy.result }}" == "success" ]; then
          STATUS="✅ SUCCESS"
          COLOR="good"
        else
          STATUS="❌ FAILED"
          COLOR="danger"
        fi
        
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"Brainrot News Deployment $STATUS\",\"color\":\"$COLOR\"}" \
            "$SLACK_WEBHOOK_URL"
        fi